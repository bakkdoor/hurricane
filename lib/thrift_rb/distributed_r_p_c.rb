#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'storm_types'

module DistributedRPC
  class Client
    include ::Thrift::Client

    def execute(functionName, funcArgs)
      send_execute(functionName, funcArgs)
      return recv_execute()
    end

    def send_execute(functionName, funcArgs)
      send_message('execute', Execute_args, :functionName => functionName, :funcArgs => funcArgs)
    end

    def recv_execute()
      result = receive_message(Execute_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'execute failed: unknown result')
    end

    def result(id, result)
      send_result(id, result)
      recv_result()
    end

    def send_result(id, result)
      send_message('result', Result_args, :id => id, :result => result)
    end

    def recv_result()
      result = receive_message(Result_result)
      return
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_execute(seqid, iprot, oprot)
      args = read_args(iprot, Execute_args)
      result = Execute_result.new()
      result.success = @handler.execute(args.functionName, args.funcArgs)
      write_result(result, oprot, 'execute', seqid)
    end

    def process_result(seqid, iprot, oprot)
      args = read_args(iprot, Result_args)
      result = Result_result.new()
      @handler.result(args.id, args.result)
      write_result(result, oprot, 'result', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Execute_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    FUNCTIONNAME = 1
    FUNCARGS = 2

    FIELDS = {
      FUNCTIONNAME => {:type => ::Thrift::Types::STRING, :name => 'functionName'},
      FUNCARGS => {:type => ::Thrift::Types::STRING, :name => 'funcArgs'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Execute_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Result_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ID = 1
    RESULT = 2

    FIELDS = {
      ID => {:type => ::Thrift::Types::STRING, :name => 'id'},
      RESULT => {:type => ::Thrift::Types::STRING, :name => 'result'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Result_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

