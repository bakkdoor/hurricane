#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#


class NullStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union

  FIELDS = {

  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class Grouping < ::Thrift::Union
  include ::Thrift::Struct_Union
  class << self
    def fields(val)
      Grouping.new(:fields, val)
    end

    def shuffle(val)
      Grouping.new(:shuffle, val)
    end

    def all(val)
      Grouping.new(:all, val)
    end

    def none(val)
      Grouping.new(:none, val)
    end

    def direct(val)
      Grouping.new(:direct, val)
    end
  end

  FIELDS = 1
  SHUFFLE = 2
  ALL = 3
  NONE = 4
  DIRECT = 5

  FIELDS = {
    FIELDS => {:type => ::Thrift::Types::LIST, :name => 'fields', :element => {:type => ::Thrift::Types::STRING}},
    SHUFFLE => {:type => ::Thrift::Types::STRUCT, :name => 'shuffle', :class => NullStruct},
    ALL => {:type => ::Thrift::Types::STRUCT, :name => 'all', :class => NullStruct},
    NONE => {:type => ::Thrift::Types::STRUCT, :name => 'none', :class => NullStruct},
    DIRECT => {:type => ::Thrift::Types::STRUCT, :name => 'direct', :class => NullStruct}
  }

  def struct_fields; FIELDS; end

  def validate
    raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
  end

  ::Thrift::Union.generate_accessors self
end

class StreamInfo
  include ::Thrift::Struct, ::Thrift::Struct_Union
  OUTPUT_FIELDS = 1
  DIRECT = 2

  FIELDS = {
    OUTPUT_FIELDS => {:type => ::Thrift::Types::LIST, :name => 'output_fields', :element => {:type => ::Thrift::Types::STRING}},
    DIRECT => {:type => ::Thrift::Types::BOOL, :name => 'direct'}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field output_fields is unset!') unless @output_fields
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field direct is unset!') if @direct.nil?
  end

  ::Thrift::Struct.generate_accessors self
end

class ShellComponent
  include ::Thrift::Struct, ::Thrift::Struct_Union
  EXECUTION_COMMAND = 1
  SCRIPT = 2

  FIELDS = {
    EXECUTION_COMMAND => {:type => ::Thrift::Types::STRING, :name => 'execution_command'},
    SCRIPT => {:type => ::Thrift::Types::STRING, :name => 'script'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ComponentObject < ::Thrift::Union
  include ::Thrift::Struct_Union
  class << self
    def serialized_java(val)
      ComponentObject.new(:serialized_java, val)
    end

    def shell(val)
      ComponentObject.new(:shell, val)
    end
  end

  SERIALIZED_JAVA = 1
  SHELL = 2

  FIELDS = {
    SERIALIZED_JAVA => {:type => ::Thrift::Types::STRING, :name => 'serialized_java', :binary => true},
    SHELL => {:type => ::Thrift::Types::STRUCT, :name => 'shell', :class => ShellComponent}
  }

  def struct_fields; FIELDS; end

  def validate
    raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
  end

  ::Thrift::Union.generate_accessors self
end

class ComponentCommon
  include ::Thrift::Struct, ::Thrift::Struct_Union
  STREAMS = 1
  PARALLELISM_HINT = 2

  FIELDS = {
    STREAMS => {:type => ::Thrift::Types::MAP, :name => 'streams', :key => {:type => ::Thrift::Types::I32}, :value => {:type => ::Thrift::Types::STRUCT, :class => StreamInfo}},
    PARALLELISM_HINT => {:type => ::Thrift::Types::I32, :name => 'parallelism_hint', :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field streams is unset!') unless @streams
  end

  ::Thrift::Struct.generate_accessors self
end

class SpoutSpec
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SPOUT_OBJECT = 1
  COMMON = 2
  DISTRIBUTED = 3

  FIELDS = {
    SPOUT_OBJECT => {:type => ::Thrift::Types::STRUCT, :name => 'spout_object', :class => ComponentObject},
    COMMON => {:type => ::Thrift::Types::STRUCT, :name => 'common', :class => ComponentCommon},
    DISTRIBUTED => {:type => ::Thrift::Types::BOOL, :name => 'distributed'}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field spout_object is unset!') unless @spout_object
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field common is unset!') unless @common
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field distributed is unset!') if @distributed.nil?
  end

  ::Thrift::Struct.generate_accessors self
end

class GlobalStreamId
  include ::Thrift::Struct, ::Thrift::Struct_Union
  COMPONENTID = 1
  STREAMID = 2

  FIELDS = {
    COMPONENTID => {:type => ::Thrift::Types::I32, :name => 'componentId'},
    STREAMID => {:type => ::Thrift::Types::I32, :name => 'streamId'}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field componentId is unset!') unless @componentId
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field streamId is unset!') unless @streamId
  end

  ::Thrift::Struct.generate_accessors self
end

class Bolt
  include ::Thrift::Struct, ::Thrift::Struct_Union
  INPUTS = 1
  BOLT_OBJECT = 2
  COMMON = 3

  FIELDS = {
    INPUTS => {:type => ::Thrift::Types::MAP, :name => 'inputs', :key => {:type => ::Thrift::Types::STRUCT, :class => GlobalStreamId}, :value => {:type => ::Thrift::Types::STRUCT, :class => Grouping}},
    BOLT_OBJECT => {:type => ::Thrift::Types::STRUCT, :name => 'bolt_object', :class => ComponentObject},
    COMMON => {:type => ::Thrift::Types::STRUCT, :name => 'common', :class => ComponentCommon}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field inputs is unset!') unless @inputs
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field bolt_object is unset!') unless @bolt_object
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field common is unset!') unless @common
  end

  ::Thrift::Struct.generate_accessors self
end

class StateSpoutSpec
  include ::Thrift::Struct, ::Thrift::Struct_Union
  STATE_SPOUT_OBJECT = 1
  COMMON = 2

  FIELDS = {
    STATE_SPOUT_OBJECT => {:type => ::Thrift::Types::STRUCT, :name => 'state_spout_object', :class => ComponentObject},
    COMMON => {:type => ::Thrift::Types::STRUCT, :name => 'common', :class => ComponentCommon}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field state_spout_object is unset!') unless @state_spout_object
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field common is unset!') unless @common
  end

  ::Thrift::Struct.generate_accessors self
end

class StormTopology
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SPOUTS = 1
  BOLTS = 2
  STATE_SPOUTS = 3

  FIELDS = {
    SPOUTS => {:type => ::Thrift::Types::MAP, :name => 'spouts', :key => {:type => ::Thrift::Types::I32}, :value => {:type => ::Thrift::Types::STRUCT, :class => SpoutSpec}},
    BOLTS => {:type => ::Thrift::Types::MAP, :name => 'bolts', :key => {:type => ::Thrift::Types::I32}, :value => {:type => ::Thrift::Types::STRUCT, :class => Bolt}},
    STATE_SPOUTS => {:type => ::Thrift::Types::MAP, :name => 'state_spouts', :key => {:type => ::Thrift::Types::I32}, :value => {:type => ::Thrift::Types::STRUCT, :class => StateSpoutSpec}}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field spouts is unset!') unless @spouts
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field bolts is unset!') unless @bolts
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field state_spouts is unset!') unless @state_spouts
  end

  ::Thrift::Struct.generate_accessors self
end

class AlreadyAliveException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  def initialize(message=nil)
    super()
    self.msg = message
  end

  def message; msg end

  MSG = 1

  FIELDS = {
    MSG => {:type => ::Thrift::Types::STRING, :name => 'msg'}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field msg is unset!') unless @msg
  end

  ::Thrift::Struct.generate_accessors self
end

class NotAliveException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  def initialize(message=nil)
    super()
    self.msg = message
  end

  def message; msg end

  MSG = 1

  FIELDS = {
    MSG => {:type => ::Thrift::Types::STRING, :name => 'msg'}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field msg is unset!') unless @msg
  end

  ::Thrift::Struct.generate_accessors self
end

class InvalidTopologyException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  def initialize(message=nil)
    super()
    self.msg = message
  end

  def message; msg end

  MSG = 1

  FIELDS = {
    MSG => {:type => ::Thrift::Types::STRING, :name => 'msg'}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field msg is unset!') unless @msg
  end

  ::Thrift::Struct.generate_accessors self
end

class TopologySummary
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ID = 1
  NAME = 2
  NUM_TASKS = 3
  NUM_WORKERS = 4
  UPTIME_SECS = 5

  FIELDS = {
    ID => {:type => ::Thrift::Types::STRING, :name => 'id'},
    NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
    NUM_TASKS => {:type => ::Thrift::Types::I32, :name => 'num_tasks'},
    NUM_WORKERS => {:type => ::Thrift::Types::I32, :name => 'num_workers'},
    UPTIME_SECS => {:type => ::Thrift::Types::I32, :name => 'uptime_secs'}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field id is unset!') unless @id
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field name is unset!') unless @name
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field num_tasks is unset!') unless @num_tasks
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field num_workers is unset!') unless @num_workers
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field uptime_secs is unset!') unless @uptime_secs
  end

  ::Thrift::Struct.generate_accessors self
end

class SupervisorSummary
  include ::Thrift::Struct, ::Thrift::Struct_Union
  HOST = 1
  UPTIME_SECS = 2
  NUM_WORKERS = 3
  NUM_USED_WORKERS = 4

  FIELDS = {
    HOST => {:type => ::Thrift::Types::STRING, :name => 'host'},
    UPTIME_SECS => {:type => ::Thrift::Types::I32, :name => 'uptime_secs'},
    NUM_WORKERS => {:type => ::Thrift::Types::I32, :name => 'num_workers'},
    NUM_USED_WORKERS => {:type => ::Thrift::Types::I32, :name => 'num_used_workers'}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field host is unset!') unless @host
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field uptime_secs is unset!') unless @uptime_secs
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field num_workers is unset!') unless @num_workers
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field num_used_workers is unset!') unless @num_used_workers
  end

  ::Thrift::Struct.generate_accessors self
end

class ClusterSummary
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SUPERVISORS = 1
  NIMBUS_UPTIME_SECS = 2
  TOPOLOGIES = 3

  FIELDS = {
    SUPERVISORS => {:type => ::Thrift::Types::LIST, :name => 'supervisors', :element => {:type => ::Thrift::Types::STRUCT, :class => SupervisorSummary}},
    NIMBUS_UPTIME_SECS => {:type => ::Thrift::Types::I32, :name => 'nimbus_uptime_secs'},
    TOPOLOGIES => {:type => ::Thrift::Types::LIST, :name => 'topologies', :element => {:type => ::Thrift::Types::STRUCT, :class => TopologySummary}}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field supervisors is unset!') unless @supervisors
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field nimbus_uptime_secs is unset!') unless @nimbus_uptime_secs
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field topologies is unset!') unless @topologies
  end

  ::Thrift::Struct.generate_accessors self
end

class ErrorInfo
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ERROR = 1
  ERROR_TIME_SECS = 2

  FIELDS = {
    ERROR => {:type => ::Thrift::Types::STRING, :name => 'error'},
    ERROR_TIME_SECS => {:type => ::Thrift::Types::I32, :name => 'error_time_secs'}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field error is unset!') unless @error
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field error_time_secs is unset!') unless @error_time_secs
  end

  ::Thrift::Struct.generate_accessors self
end

class BoltStats
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ACKED = 1
  FAILED = 2
  PROCESS_MS_AVG = 3

  FIELDS = {
    ACKED => {:type => ::Thrift::Types::MAP, :name => 'acked', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::MAP, :key => {:type => ::Thrift::Types::STRUCT, :class => GlobalStreamId}, :value => {:type => ::Thrift::Types::I64}}},
    FAILED => {:type => ::Thrift::Types::MAP, :name => 'failed', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::MAP, :key => {:type => ::Thrift::Types::STRUCT, :class => GlobalStreamId}, :value => {:type => ::Thrift::Types::I64}}},
    PROCESS_MS_AVG => {:type => ::Thrift::Types::MAP, :name => 'process_ms_avg', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::MAP, :key => {:type => ::Thrift::Types::STRUCT, :class => GlobalStreamId}, :value => {:type => ::Thrift::Types::DOUBLE}}}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field acked is unset!') unless @acked
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field failed is unset!') unless @failed
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field process_ms_avg is unset!') unless @process_ms_avg
  end

  ::Thrift::Struct.generate_accessors self
end

class SpoutStats
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ACKED = 1
  FAILED = 2
  COMPLETE_MS_AVG = 3

  FIELDS = {
    ACKED => {:type => ::Thrift::Types::MAP, :name => 'acked', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::MAP, :key => {:type => ::Thrift::Types::I32}, :value => {:type => ::Thrift::Types::I64}}},
    FAILED => {:type => ::Thrift::Types::MAP, :name => 'failed', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::MAP, :key => {:type => ::Thrift::Types::I32}, :value => {:type => ::Thrift::Types::I64}}},
    COMPLETE_MS_AVG => {:type => ::Thrift::Types::MAP, :name => 'complete_ms_avg', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::MAP, :key => {:type => ::Thrift::Types::I32}, :value => {:type => ::Thrift::Types::DOUBLE}}}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field acked is unset!') unless @acked
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field failed is unset!') unless @failed
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field complete_ms_avg is unset!') unless @complete_ms_avg
  end

  ::Thrift::Struct.generate_accessors self
end

class TaskSpecificStats < ::Thrift::Union
  include ::Thrift::Struct_Union
  class << self
    def bolt(val)
      TaskSpecificStats.new(:bolt, val)
    end

    def spout(val)
      TaskSpecificStats.new(:spout, val)
    end
  end

  BOLT = 1
  SPOUT = 2

  FIELDS = {
    BOLT => {:type => ::Thrift::Types::STRUCT, :name => 'bolt', :class => BoltStats},
    SPOUT => {:type => ::Thrift::Types::STRUCT, :name => 'spout', :class => SpoutStats}
  }

  def struct_fields; FIELDS; end

  def validate
    raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
  end

  ::Thrift::Union.generate_accessors self
end

class TaskStats
  include ::Thrift::Struct, ::Thrift::Struct_Union
  EMITTED = 1
  TRANSFERRED = 2
  SPECIFIC = 3

  FIELDS = {
    EMITTED => {:type => ::Thrift::Types::MAP, :name => 'emitted', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::MAP, :key => {:type => ::Thrift::Types::I32}, :value => {:type => ::Thrift::Types::I64}}},
    TRANSFERRED => {:type => ::Thrift::Types::MAP, :name => 'transferred', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::MAP, :key => {:type => ::Thrift::Types::I32}, :value => {:type => ::Thrift::Types::I64}}},
    SPECIFIC => {:type => ::Thrift::Types::STRUCT, :name => 'specific', :class => TaskSpecificStats}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field emitted is unset!') unless @emitted
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field transferred is unset!') unless @transferred
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field specific is unset!') unless @specific
  end

  ::Thrift::Struct.generate_accessors self
end

class TaskSummary
  include ::Thrift::Struct, ::Thrift::Struct_Union
  TASK_ID = 1
  COMPONENT_ID = 2
  HOST = 3
  PORT = 4
  UPTIME_SECS = 5
  ERRORS = 6
  STATS = 7

  FIELDS = {
    TASK_ID => {:type => ::Thrift::Types::I32, :name => 'task_id'},
    COMPONENT_ID => {:type => ::Thrift::Types::I32, :name => 'component_id'},
    HOST => {:type => ::Thrift::Types::STRING, :name => 'host'},
    PORT => {:type => ::Thrift::Types::I32, :name => 'port'},
    UPTIME_SECS => {:type => ::Thrift::Types::I32, :name => 'uptime_secs'},
    ERRORS => {:type => ::Thrift::Types::LIST, :name => 'errors', :element => {:type => ::Thrift::Types::STRUCT, :class => ErrorInfo}},
    STATS => {:type => ::Thrift::Types::STRUCT, :name => 'stats', :class => TaskStats, :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field task_id is unset!') unless @task_id
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field component_id is unset!') unless @component_id
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field host is unset!') unless @host
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field port is unset!') unless @port
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field uptime_secs is unset!') unless @uptime_secs
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field errors is unset!') unless @errors
  end

  ::Thrift::Struct.generate_accessors self
end

class TopologyInfo
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ID = 1
  NAME = 2
  UPTIME_SECS = 3
  TASKS = 4

  FIELDS = {
    ID => {:type => ::Thrift::Types::STRING, :name => 'id'},
    NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
    UPTIME_SECS => {:type => ::Thrift::Types::I32, :name => 'uptime_secs'},
    TASKS => {:type => ::Thrift::Types::LIST, :name => 'tasks', :element => {:type => ::Thrift::Types::STRUCT, :class => TaskSummary}}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field id is unset!') unless @id
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field name is unset!') unless @name
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field uptime_secs is unset!') unless @uptime_secs
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field tasks is unset!') unless @tasks
  end

  ::Thrift::Struct.generate_accessors self
end

